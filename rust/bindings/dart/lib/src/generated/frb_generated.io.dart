// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.2.0.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api.dart';
import 'api/sub_module.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';

abstract class RustLibApiImplPlatform extends BaseApiImpl<RustLibWire> {
  RustLibApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @protected
  AnotherTestRustApi dco_decode_another_test_rust_api(dynamic raw);

  @protected
  AnotherTestRustApi dco_decode_box_autoadd_another_test_rust_api(dynamic raw);

  @protected
  TestRustApi dco_decode_box_autoadd_test_rust_api(dynamic raw);

  @protected
  TestRustApi dco_decode_test_rust_api(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  AnotherTestRustApi sse_decode_another_test_rust_api(
      SseDeserializer deserializer);

  @protected
  AnotherTestRustApi sse_decode_box_autoadd_another_test_rust_api(
      SseDeserializer deserializer);

  @protected
  TestRustApi sse_decode_box_autoadd_test_rust_api(
      SseDeserializer deserializer);

  @protected
  TestRustApi sse_decode_test_rust_api(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  void sse_encode_another_test_rust_api(
      AnotherTestRustApi self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_another_test_rust_api(
      AnotherTestRustApi self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_test_rust_api(
      TestRustApi self, SseSerializer serializer);

  @protected
  void sse_encode_test_rust_api(TestRustApi self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);
}

// Section: wire_class

class RustLibWire implements BaseWire {
  factory RustLibWire.fromExternalLibrary(ExternalLibrary lib) =>
      RustLibWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustLibWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;
}
